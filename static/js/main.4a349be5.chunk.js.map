{"version":3,"sources":["components/header/header.js","components/error-indicator/error-indicator.js","services/swapi-service.js","components/spinner/spiner.js","components/random-planet/random-planet.js","components/swapi-service-context/swapi-service-context.js","components/item-list/item-list.js","components/hoc-helpers/with-data.js","components/sw-components/item-lists.js","components/item-details/item-details.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/app/app.js","index.js"],"names":["Header","className","to","ErrorIndicator","SwapiService","_apiBase","_imageBase","getResource","url","a","fetch","res","ok","Error","status","json","getAllPeople","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getPlanetImage","getStarshipImage","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","Spinner","RandomPlanet","swapiService","state","loading","error","onPlanetLoaded","setState","onErr","err","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","src","onError","e","target","onerror","alt","React","Component","defaultProps","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","ItemList","data","onItemSelected","renderLabel","children","items","item","label","onClick","withData","View","getData","withChildFunction","Wrapped","fn","PersonList","PlanetList","StarshipList","Record","field","ItemDetails","image","updateItem","itemId","getImageUrl","prevProps","Children","child","cloneElement","PersonDetails","PlanetDetails","StarshipDetails","Row","left","right","PeoplePage","selectedItem","PlanetsPage","StarshipsPage","App","hasError","MainContent","value","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a349be5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './header.css';\n\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n    return (\n        <div className=\"header d-flex\">\n            <h3>\n                <Link to=\"/starDB/\">Star DB</Link>\n            </h3>\n\n            <ul className=\"d-flex\">\n                <li>\n                    <Link to=\"/starDB/people/\">People</Link>\n                </li>\n                <li>\n                    <Link to=\"/starDB/planets/\">Planets</Link>\n                </li>\n                <li>\n                    <Link to=\"/starDB/starships/\">Starships</Link>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport './error-indicator.css';\n\nconst ErrorIndicator = () => {\n  return (\n    <div className=\"error-indicator\">\n      <span className=\"boom\">BOOM!</span>\n      <span>\n        something has gone terribly wrong\n      </span>\n      <span>\n        (but we already sent droids to fix it)\n      </span>\n    </div>\n  );\n};\n\nexport default ErrorIndicator;\n","export default class SwapiService {\n    _apiBase = 'https://swapi-deno.azurewebsites.net/api/';\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n    getResource = async (url) => {\n        const res = await fetch(`${this._apiBase}${url}`);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}, received ${res.status}.`);\n        }\n\n        return await res.json();\n    }\n\n    getAllPeople = async () => {\n        const res = await this.getResource(`/people/`);\n        return res.map(this._transformPerson);\n    }\n\n    getPerson = async (id) => {\n        const person = await this.getResource(`/people/${id}/`);\n        return this._transformPerson(person);\n    }\n\n    getAllPlanets = async () => {\n        const res = await this.getResource(`/planets/`);\n        return res.map(this._transformPlanet);\n    }\n\n    getPlanet = async (id) => {\n        const planet = await this.getResource(`/planets/${id}/`);\n        return this._transformPlanet(planet);\n    }\n\n    getAllStarships = async () => {\n        const res = await this.getResource(`/starships/`);\n        return res.map(this._transformStarship);\n    }\n\n    getStarship = async (id) => {\n        const starship = await this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    }\n\n    getPersonImage = ({ id }) => {\n        return `${this._imageBase}/characters/${ id }.jpg`\n    }\n\n    getPlanetImage = ({ id }) => {\n        return `${this._imageBase}/planets/${ id }.jpg`\n    }\n\n    getStarshipImage = ({ id }) => {\n        return `${this._imageBase}/starships/${ id }.jpg`\n    }\n\n    _transformPlanet = (planet) => {\n        return {\n            id: planet.url,\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    };\n\n    _transformStarship = (starship) => {\n        return {\n            id: starship.url,\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.cost_in_credits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargo_capacity\n        }\n    };\n\n    _transformPerson = (person) => {\n        return {\n            id: person.url,\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color\n        }\n    };\n}\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"loadingio-spinner-double-ring-gewxl96bsw\">\n            <div className=\"ldio-43x4o4frn09\">\n                <div></div>\n                <div></div>\n                <div>\n                    <div></div>\n                </div>\n                <div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Spinner;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport SwapiService from \"../../services/swapi-service\";\n\nimport './random-planet.css';\nimport Spinner from \"../spinner/spiner\";\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\n\nexport default class RandomPlanet extends React.Component {\n    static defaultProps = {\n        updateInterval: 15000\n    };\n\n    static propTypes = {\n        updateInterval: PropTypes.number\n    };\n\n    swapiService = new SwapiService();\n\n    state = {\n        planet: {},\n        loading: true,\n        error: false\n    }\n\n    componentDidMount() {\n        const { updateInterval } = this.props;\n        this.updatePlanet();\n        this.interval = setInterval(this.updatePlanet, updateInterval);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false\n        });\n    };\n\n    onErr = (err) => {\n        this.setState({\n           error: true,\n           loading: false\n        });\n    }\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 21 + 1);\n\n        this.swapiService.getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.onErr);\n    }\n\n    render() {\n        const { planet: { id, name, population, rotationPeriod, diameter }, loading, error } = this.state;\n\n        if (loading) {\n            return <Spinner />;\n        }\n\n        if (error) {\n            return <ErrorIndicator />;\n        }\n\n        return (\n            <div className=\"random-planet jumbotron rounded card\">\n                <img className=\"planet-image\"\n                     src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n                     onError={(e) => {e.target.onerror = null; e.target.src=\"https://us.123rf.com/450wm/1xpert/1xpert2005/1xpert200500029/146048530-planet-earth-globe-isolated-.jpg?ver=6\"}}\n                     alt=\"planet\" />\n                <div>\n                    <h4>{ name }</h4>\n                    <ul className=\"list-group list-group-flush\">\n                        <li className=\"list-group-item\">\n                            <span className=\"term\">Population</span>\n                            <span>{ population }</span>\n                        </li>\n                        <li className=\"list-group-item\">\n                            <span className=\"term\">Rotation Period</span>\n                            <span>{ rotationPeriod }</span>\n                        </li>\n                        <li className=\"list-group-item\">\n                            <span className=\"term\">Diameter</span>\n                            <span>{ diameter }</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nconst {\n    Provider: SwapiServiceProvider,\n    Consumer: SwapiServiceConsumer\n} = React.createContext();\n\nexport { SwapiServiceConsumer, SwapiServiceProvider };\n","import React from \"react\";\n\nimport './item-list.css';\n\nconst ItemList = (props) => {\n  const { data, onItemSelected, children: renderLabel } = props;\n\n  const items = data.map((item) => {\n    const { id } = item;\n    const label = renderLabel(item);\n\n    return (\n      <li className=\"list-group-item\"\n          key={id}\n          onClick={() => onItemSelected(id)}>\n        {label}\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"item-list list-group\">\n      {items}\n    </ul>\n  );\n};\n\nexport default ItemList;","import React from \"react\";\nimport Spinner from \"../spinner/spiner\";\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\n\nconst withData = (View, getData) => {\n    return class extends React.Component {\n        state = {\n            data: null,\n            error: false,\n            loading: true\n        };\n\n        componentDidMount() {\n            getData()\n                .then((data) => {\n                    this.setState({\n                        data,\n                        loading: false\n                    });\n                })\n                .catch(() => {\n                    this.setState({\n                        error: true,\n                        loading: false\n                    })\n                });\n        }\n\n        render() {\n            const { data, error, loading } = this.state;\n\n            if (loading) {\n                return <Spinner />;\n            }\n\n            if (error) {\n                return <ErrorIndicator />;\n            }\n\n            return <View {...this.props} data={ data } />\n        }\n    }\n}\n\nexport { withData };\n","import React from \"react\";\n\nimport ItemList from \"../item-list/item-list\";\nimport { withData} from \"../hoc-helpers/with-data\";\nimport SwapiService from \"../../services/swapi-service\";\n\nconst swapiService = new SwapiService();\n\nconst {\n    getAllPlanets,\n    getAllPeople,\n    getAllStarships\n} = swapiService;\n\nconst withChildFunction = (Wrapped, fn) => {\n    return (props) => {\n        return (\n            <Wrapped {...props}>\n                {fn}\n            </Wrapped>\n        );\n    };\n};\n\nconst renderNameAndBirthDate = ({ name, birthYear }) => <span>{ name } ({ birthYear })</span>;\nconst renderNameAndModel = ({ name, model }) => <span>{ name } ({ model })</span>;\nconst renderNameAndDiameter = ({ name, diameter }) => <span>{ name } ({ diameter })</span>;\n\nconst PersonList = withData(\n                        withChildFunction(ItemList, renderNameAndBirthDate),\n                        getAllPeople);\n\nconst PlanetList = withData(\n                        withChildFunction(ItemList, renderNameAndDiameter),\n                        getAllPlanets);\n\nconst StarshipList = withData(\n                        withChildFunction(ItemList, renderNameAndModel),\n                        getAllStarships);\n\nexport {\n    PlanetList,\n    PersonList,\n    StarshipList\n};","import React from \"react\";\n\nimport './item-details.css';\n\nconst Record = ({ item, field, label }) => {\n    return (\n        <li className=\"list-group-item\">\n            <span className=\"term\">{ label }</span>\n            <span>{ item[field] }</span>\n        </li>\n    );\n}\n\nexport { Record };\n\nexport default class ItemDetails extends React.Component {\n    state = {\n        item: null,\n        image: null\n    };\n\n    componentDidMount() {\n        this.updateItem();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.itemId !== prevProps.itemId) {\n            this.updateItem();\n        }\n    }\n\n    updateItem = () => {\n        const { itemId, getData, getImageUrl } = this.props;\n\n        if (!itemId) {\n            return;\n        }\n\n        getData(itemId)\n            .then((item) => {\n                this.setState({\n                    item,\n                    image: getImageUrl(item)\n                });\n            });\n    };\n\n    render() {\n        const { item, image } = this.state;\n\n        if (!item) {\n            return <span>Select a person from the list</span>;\n        }\n\n        const { name } = item;\n\n        return (\n            <div className=\"item-details card\">\n                <img className=\"item-image\"\n                     src={ image }\n                     onError={(e) => {e.target.onerror = null; e.target.src = \"https://image.shutterstock.com/image-photo/portrait-gray-tabby-cat-on-260nw-1180312252.jpg\"}}\n                     alt=\"item\" />\n\n                <div className=\"card-body\">\n                    <h4>{ name }</h4>\n\n                    <ul className=\"list-group list-group-flush\">\n                        {\n                            React.Children.map(this.props.children, (child) => {\n                                return React.cloneElement(child, { item });\n                            })\n                        }\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {SwapiServiceConsumer} from \"../swapi-service-context/swapi-service-context\";\nimport ItemDetails, {Record} from \"../item-details/item-details\";\n\nconst PersonDetails = ({ itemId }) => {\n    return (\n        <SwapiServiceConsumer>\n            {\n                ({ getPerson, getPersonImage }) => {\n                    return (\n                        <ItemDetails itemId={ itemId } getData={ getPerson } getImageUrl={ getPersonImage }>\n                            <Record field=\"gender\" label=\"Gender:\" />\n                            <Record field=\"birthYear\" label=\"Birth Year:\" />\n                            <Record field=\"eyeColor\" label=\"Eye Color:\" />\n                        </ItemDetails>\n                    );\n                }\n            }\n        </SwapiServiceConsumer>\n    );\n};\n\nexport { PersonDetails };\n","import React from \"react\";\nimport {SwapiServiceConsumer} from \"../swapi-service-context/swapi-service-context\";\nimport ItemDetails, {Record} from \"../item-details/item-details\";\n\nconst PlanetDetails = ({ itemId }) => {\n    return (\n        <SwapiServiceConsumer>\n            {\n                ({ getPlanet, getPlanetImage }) => {\n                    return (\n                        <ItemDetails itemId={ itemId } getData={ getPlanet } getImageUrl={ getPlanetImage }>\n                            <Record field=\"population\" label=\"Population:\" />\n                            <Record field=\"rotationPeriod\" label=\"Rotation Period:\" />\n                            <Record field=\"diameter\" label=\"Diameter:\" />\n                        </ItemDetails>\n                    );\n                }\n            }\n        </SwapiServiceConsumer>\n    );\n};\n\nexport { PlanetDetails };\n","import React from \"react\";\nimport {SwapiServiceConsumer} from \"../swapi-service-context/swapi-service-context\";\nimport ItemDetails, {Record} from \"../item-details/item-details\";\n\nconst StarshipDetails = ({ itemId }) => {\n    return (\n        <SwapiServiceConsumer>\n            {\n                ({ getStarship, getStarshipImage }) => {\n                    return (\n                        <ItemDetails itemId={ itemId } getData={ getStarship } getImageUrl={ getStarshipImage }>\n                            <Record field=\"model\" label=\"Model:\" />\n                            <Record field=\"length\" label=\"Length:\" />\n                            <Record field=\"costInCredits\" label=\"Cost:\" />\n                        </ItemDetails>\n                    );\n                }\n            }\n        </SwapiServiceConsumer>\n    );\n};\n\nexport { StarshipDetails };\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './row.css';\n\nexport default function Row ({ left, right }) {\n    return (\n        <div className='people-page row mb2'>\n            <div className='col-md-6'>\n                { left }\n            </div>\n            <div className='col-md-6'>\n                { right }\n            </div>\n        </div>\n    );\n}\n\nRow.propTypes = {\n    left: PropTypes.node,\n    right: PropTypes.node\n}\n","import React from 'react';\nimport { PersonDetails, PersonList } from \"../sw-components\";\nimport Row from \"../row/row\";\n\nexport default class PeoplePage extends React.Component {\n    state = {\n        selectedItem: null\n    };\n\n    onItemSelected = (selectedItem) => {\n        this.setState({ selectedItem });\n    };\n\n    render() {\n        const { selectedItem } = this.state;\n\n        return (\n            <Row\n                left={<PersonList onItemSelected={ this.onItemSelected } />}\n                right={<PersonDetails itemId={ selectedItem } />} />\n        );\n    }\n}\n","import React from 'react';\nimport { PlanetDetails, PlanetList } from \"../sw-components\";\nimport Row from \"../row/row\";\n\nexport default class PlanetsPage extends React.Component {\n    state = {\n        selectedItem: null\n    };\n\n    onItemSelected = (selectedItem) => {\n        this.setState({ selectedItem });\n    };\n\n    render() {\n        const { selectedItem } = this.state;\n\n        return (\n            <Row\n                left={<PlanetList onItemSelected={ this.onItemSelected } />}\n                right={<PlanetDetails itemId={ selectedItem } />} />\n        );\n    }\n}\n","import React from 'react';\nimport { StarshipDetails, StarshipList } from \"../sw-components\";\nimport Row from \"../row/row\";\n\nexport default class StarshipsPage extends React.Component {\n    state = {\n        selectedItem: null\n    };\n\n    onItemSelected = (selectedItem) => {\n        this.setState({ selectedItem });\n    };\n\n    render() {\n        const { selectedItem } = this.state;\n\n        return (\n            <Row\n                left={<StarshipList onItemSelected={ this.onItemSelected } />}\n                right={<StarshipDetails itemId={ selectedItem } />} />\n        );\n    }\n}\n","import React from \"react\";\n\nimport './app.css'\n\nimport Header from \"../header/header\";\nimport ErrorIndicator from \"../error-indicator/error-indicator\";\nimport RandomPlanet from \"../random-planet/random-planet\";\nimport SwapiService from \"../../services/swapi-service\";\nimport { SwapiServiceProvider } from \"../swapi-service-context/swapi-service-context\";\nimport { PeoplePage, PlanetsPage, StarshipsPage } from '../pages'\n\nimport {BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nexport default class App extends React.Component {\n  swapiService = new SwapiService();\n\n  state = {\n    hasError: false\n  };\n\n  MainContent = () => {\n    return (\n      <div className=\"main-content\">\n        <h2 className=\"title\">Welcome to StarDB!</h2>\n        <h4 className=\"subtitle\">Please, choose any category in menu!</h4>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return (\n      <SwapiServiceProvider value={ this.swapiService }>\n        <Router>\n          <div className=\"stardb-app\">\n            <Header />\n\n            <RandomPlanet />\n\n            <Routes>\n              <Route exact path='/starDB/' element={ this.MainContent() } />\n              <Route path='/starDB/people/' element={ <PeoplePage /> }/>\n              <Route path='/starDB/planets/' element={ <PlanetsPage /> } />\n              <Route exact path='/starDB/starships/' element={ <StarshipsPage /> } />\n            </Routes>\n          </div>\n        </Router>\n      </SwapiServiceProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app/app\";\n\nReactDOM.render(<App />,\n    document.getElementById('root'));"],"sourceRoot":""}